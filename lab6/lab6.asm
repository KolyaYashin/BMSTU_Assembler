; http://www.e-dok.narod.ru/assembler/book/gl04-03.html
; Размер COM-программы ограничен размером одного сегмента (64 Кбайт)
; Program Segment Prefix (PSP) – область памяти размером 256 (0100h) байт, предшествующая программе при ее загрузке. PSP содержит данные командной строки и относящиеся к программе переменные.
; COM-программа генерирует стек автоматически
; В COM-программе все данные должны быть определены в сегменте кода.
.MODEL TINY
.186 ; задание набора допустимых команд

CSEG SEGMENT PARA PUBLIC
	ASSUME CS:CSEG, DS:CSEG ; CS и DS указывают на сегмент кода
  ORG 100h ; это директива, размер PSP(префикс программного сегмента)
           ; для COM программы - 256 байтов, поэтому смещение 100h (загружается COM-файл и его запуск происходит с адреса PSP:0100h)
           ; при запуске программы номер параграфа начала PSP заносится в DS
main:
    jmp initze        ; команда jmp используется для обхода данных, определенных в программе
    cur db 0
    speed db 01fh     ; скорость автоповтора ввода символов - максимальное начальное значение (01fh = 31 в 10сс)
    OLD_BREAKING dd ? ; адрес старого прерывания
    flag db 1 ; флаг истечения интервала

this_is_the_loop:
  pusha             ; поместить в стек регистры AX, CX, DX, BX, SP, BP, SI, DI (16-битные РОН)

  mov ah, 02h       ; 02h - функции вывода символа
  int 1ah           ; функция BIOS для получения текущего времени

  cmp dh, cur   ; сравниваем значение в dh с текущим (offset initze)
	mov cur, dh
	je next_it

  mov al, 0F3h      ; установить параметры режима автоповтора
	out 60h, al       ; механизм ввода-вывода через порты, порт 60h доступен для записи и обычно принимает пары байтов последовательно: первый - код команды, второй - данные
	mov al, speed     ; новая скорость автоповтора
	out 60h, al       ; новое состояние светодиодов

  dec speed         ; уменьшим вывод на 1 символ
	test speed, 01fh  ; аналог побитового И, результат записывается в SF, ZF, PF
	jz reset_speed    ; ZF = 1 - значит значение 0 и переходим к сбросу
	jmp next_it

    reset_speed:
        mov speed, 01fh  ; cброс скорости в начальное значение

    next_it:
        popa
        jmp CS:OLD_BREAKING ; снова к прерыванию https://www.cyberforum.ru/assembler/thread1005284-page35.html

initze:
    ; сохраним исходный вектор, ah = 35h (DOS 35h вектор прерывания), al = номер прерывания (00H до 0ffH - gray background + blink)
    ; 08h - перехват прерывания (для таймера, 09h - для keyboard)
    mov al,08h ; меняет ES и BX, ES:BX = адрес обработчика прерывания (адрес-сегмент и адрес-смещение соответственно)
    mov ah,35h ; для чтения предыдущего содержимого вектора прерываний
    int 21h

    cmp es:flag, 1  ; если уже был перехват, то возвращаем к старому значению
    je CANCEL

    jmp SET

SET:
  mov word ptr OLD_BREAKING, BX 	     ; сохранение смещения обработчика, т.к. 35h хранит данные в ES:BX или ES:[AL * 4]
	mov word ptr OLD_BREAKING + 2, ES    ; сохранение сегмента обработчика

  mov ax, 2508h               ; установка адреса нового обработчика, ah = 25h (set int vector to our service routine) al = номер прерывания (00H до 0ffH)
	mov dx, offset this_is_the_loop  ; указание смещения нашего обработчика
  int 21h

  mov dx, offset initze         ; смещение команды, начиная с которой фрагмент программы может быть удален из памяти
  int 27h                     ; у программы есть две возможности при завершении остаться резидентной в памяти и одно из них - использовать это прерывание
                              ; при этом CS должен указывать на PSP программы, а в регистр DX следует записать количество байтов, которые следует оставить от начала PSP. Другими словами, в DX требуется загрузить смещение команды, начиная с которой фрагмент программы может быть удален из памяти.

CANCEL:
  pusha ; поместить в стек регистры AX, CX, DX, BX, SP, BP, SI, DI (16-битные РОН)

  mov dx, word ptr ES:OLD_BREAKING ; данный операнд в памяти нужно интерпретировать, как операнд размером в слово
	mov ds, word ptr ES:OLD_BREAKING + 2

	mov ax, 2508h ; установка нашего прерывания
	int 21h

  mov al, 0F3h ; функция чтения файла?
	out 60h, al ; механизм ввода-вывода через порты
	mov al, 0
	out 60h, al ; порт 60h доступен для записи и обычно принимает пары байтов последовательно: первый - код команды, второй - данные

  popa ; загрузить регистры из стека (SP игнорируется)

  mov ah, 49h ; установить режим передачи
	int 21h     ; вызов DOS

  mov ax, 4c00h
  int 21h
CSEG ENDS
END main
